{"version":3,"sources":["logo.svg","SimpleTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","table","minWidth","rows","SimpleTable","useState","affectedPlaces","setAffectedPlaces","setMessage","setLastChecked","useEffect","a","axios","res","data","covid19Stats","message","lastChecked","getData","classes","length","addDetum","push","console","log","i","country","province","lastUpdatedAt","lastUpdate","confirmed","deaths","recovered","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,mOCYrCC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAMRC,EAAO,GAEE,SAASC,IAAe,IAAD,EACUC,mBAAS,IADnB,mBAC3BC,EAD2B,KACXC,EADW,OAEJF,mBAAS,IAFL,mBAElBG,GAFkB,aAGIH,mBAAS,IAHb,mBAGdI,GAHc,WAKlCC,qBAAU,YACK,uCAAG,4BAAAC,EAAA,sEAEIC,IAAM,CACtB,OAAS,MACT,IAAM,kEACN,QAAU,CACV,eAAe,2BACf,kBAAkB,iDAClB,iBAAiB,wDARL,OAERC,EAFQ,OAYdN,EAAkBM,EAAIC,KAAKA,KAAKC,cAChCP,EAAWK,EAAIC,KAAKE,SACpBP,EAAeI,EAAIC,KAAKG,aAdV,2CAAH,qDAgBbC,KACC,IACH,IAAMC,EAAUpB,IAChB,GAA6B,IAA1BO,EAAec,OAAc,OAAO,yEACvC,IAAIN,EAAI,YAAOR,GAIf,SAASe,EAASP,GACdX,EAAKmB,KAAKR,GAHdS,QAAQC,IAAIV,GAMZ,IAAI,IAAIW,EAAI,EAAGA,EAAIX,EAAKM,OAAQK,IAAK,CAQjCJ,EAAU,CAACK,QAPGZ,EAAKW,GAAGC,QAOFC,SANLb,EAAKW,GAAGE,SAMOC,cALVd,EAAKW,GAAGI,WAKiBC,UAJ7BhB,EAAKW,GAAGK,UAIgCC,OAH3CjB,EAAKW,GAAGM,OAG2CC,UAFhDlB,EAAKW,GAAGO,YAM5B,OACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KAC3B,kBAACC,EAAA,EAAD,CAAOC,UAAWlB,EAAQlB,MAAOqC,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,mBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,eACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,oBAGJ,kBAACC,EAAA,EAAD,KACCxC,EAAKyC,KAAI,SAAAC,GAAG,OACT,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAInB,SACnB,kBAACe,EAAA,EAAD,CAAWC,MAAM,QACZG,EAAInB,SAET,kBAACe,EAAA,EAAD,CAAWC,MAAM,QAAQG,EAAIlB,UAC7B,kBAACc,EAAA,EAAD,CAAWC,MAAM,QAAQG,EAAIjB,eAC7B,kBAACa,EAAA,EAAD,CAAWC,MAAM,QAAQG,EAAIf,WAC7B,kBAACW,EAAA,EAAD,CAAWC,MAAM,QAAQG,EAAId,QAC7B,kBAACU,EAAA,EAAD,CAAWC,MAAM,QAAQG,EAAIb,kB,YC5E9Be,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAACjC,EAAD,QCEc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMhD,c","file":"static/js/main.e7df1ab0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport axios from 'axios';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\n\n\nconst rows = [];\n\nexport default function SimpleTable() {\n    const [affectedPlaces, setAffectedPlaces] = useState([]);\n    const [message, setMessage] = useState(\"\");\n    const [lastChecked, setLastChecked] = useState(\"\");\n\n    useEffect(() => {\n      const getData = async () => {\n     \n        const res = await axios({\n          \"method\":\"GET\",\n          \"url\":\"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\",\n          \"headers\":{\n          \"content-type\":\"application/octet-stream\",\n          \"x-rapidapi-host\":\"covid-19-coronavirus-statistics.p.rapidapi.com\",\n          \"x-rapidapi-key\":\"722bd92681mshbaf4f305bdd412ep1bb136jsn6629319fdb37\"\n          }\n        });\n\n        setAffectedPlaces(res.data.data.covid19Stats);\n        setMessage(res.data.message);\n        setLastChecked(res.data.lastChecked);\n      }\n      getData();\n    }, []);\n    const classes = useStyles();\n    if(affectedPlaces.length === 0) return <div>Real Time Covid-19 statistics Loading...</div>;\n    let data = [...affectedPlaces];\n  \n    console.log(data);\n\n    function addDetum(data)  {\n        rows.push(data);\n    }\n\n    for(let i = 0; i < data.length; i++) {\n        let country = data[i].country;\n        let province = data[i].province;\n        let lastUpdatedAt = data[i].lastUpdate;\n        let confirmed = data[i].confirmed;\n        let deaths = data[i].deaths;\n        let recovered = data[i].recovered;\n\n        addDetum( {country, province, lastUpdatedAt, confirmed, deaths, recovered} );\n\n    }\n\n    return (\n        <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n            <TableRow>\n                <TableCell>Country</TableCell>\n                <TableCell align=\"left\">Province</TableCell>\n                <TableCell align=\"left\">Last Updated</TableCell>\n                <TableCell align=\"left\">Confirmed Cases</TableCell>\n                <TableCell align=\"left\">Death Cases</TableCell>\n                <TableCell align=\"left\">Recovery Cases</TableCell>\n            </TableRow>\n            </TableHead>\n            <TableBody>\n            {rows.map(row => (\n                <TableRow key={row.country}>\n                <TableCell align=\"left\">\n                    {row.country}\n                </TableCell>\n                <TableCell align=\"left\">{row.province}</TableCell>\n                <TableCell align=\"left\">{row.lastUpdatedAt}</TableCell>\n                <TableCell align=\"left\">{row.confirmed}</TableCell>\n                <TableCell align=\"left\">{row.deaths}</TableCell>\n                <TableCell align=\"left\">{row.recovered}</TableCell>\n                </TableRow>\n            ))}\n            </TableBody>\n        </Table>\n        </TableContainer>\n    );\n}\n","import React from 'react';\nimport SimpleTable from './SimpleTable.js'\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleTable/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}